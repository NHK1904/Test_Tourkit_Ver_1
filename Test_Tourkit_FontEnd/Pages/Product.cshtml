@page
@model Test_Tourkit_FontEnd.Pages.ProductModel

@{
    ViewData["Title"] = "Product List";
}

<h2>Product List</h2>
<div class="row mb-3">
    <div class="col-md-4">
        <input type="text" id="filterProductName" class="form-control" placeholder="Filter by Product Name" />
    </div>
    <div class="col-md-4">
        <select id="filterProductCategory" class="form-select">
            <option value="">Filter by Category</option>
            <!-- Options will be loaded dynamically -->
        </select>
    </div>
    <div class="col-md-4">
        <button class="btn btn-primary" id="applyFilter">Apply Filter</button>
        <button class="btn btn-secondary" id="resetFilter">Reset Filter</button>
    </div>
</div>

<table id="productsTable" class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Price</th>
            <th>Category</th>
            <th>Date Added</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>

    </tbody>
</table>

<!-- Edit Product-->
<div id="editProductModal" class="modal" tabindex="-1" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editProductForm">
                    <input type="hidden" id="productId" />

                    <div class="mb-3">
                        <label for="productIdDisplay" class="form-label">Product ID</label>
                        <input type="text" class="form-control" id="productIdDisplay" disabled />
                    </div>

                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" />
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Price</label>
                        <input type="text" id="price" class="form-control" placeholder="Giá sản phẩm" pattern="^\d+(\.\d{1,2})?$" required />
                    </div>
                    <input type="hidden" id="productCategoryId" />

                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <input type="text" class="form-control" id="category" disabled />
                    </div>

                    <div class="mb-3">
                        <label for="categoryIdDisplay" class="form-label">Category ID</label>
                        <input type="text" class="form-control" id="categoryIdDisplay" disabled />
                    </div>

                    <div class="mb-3">
                        <label for="dateAdded" class="form-label">Date Added</label>
                        <input type="text" class="form-control" id="dateAdded" disabled />
                    </div>

                    <button type="submit" class="btn btn-primary">Update</button>
                </form>
            </div>
        </div>
    </div>
</div>

<button class="btn btn-primary mb-3" onclick="openAddProductModal()">Add Product</button>

<!-- Add Product Modal -->
<div id="addProductModal" class="modal" tabindex="-1" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addProductForm">
                    <div class="mb-3">
                        <label for="newProductName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="newProductName" required />
                    </div>
                    <div class="form-group">
                        <label for="newPrice">Giá sản phẩm:</label>
                        <input type="text" id="newPrice" class="form-control" placeholder="Nhập giá sản phẩm" pattern="^\d+(\.\d{1,2})?$" required />
                    </div>
                    <div class="mb-3">
                        <label for="newCategory" class="form-label">Category</label>
                        <select id="newCategory" class="form-select" multiple>

                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="newDateAdded" class="form-label">Date Added</label>
                        <input type="date" class="form-control" id="newDateAdded" required />
                    </div>
                    <button type="submit" class="btn btn-primary">Add Product</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function () {
            var table = $('#productsTable').DataTable({
                "ajax": {
                    "url": "https://localhost:7165/api/Products/GetProducts", 
                    "dataSrc": function (json) {
                        return json || []; 
                    }
                },
                "columns": [
                    { "data": "productId" },
                    { "data": "productName" },
                    { "data": "price" },
                    { "data": "productCategory1" },
                    { "data": "dateAdded", "render": function (data) { return new Date(data).toLocaleDateString(); } },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<button class="btn btn-info" onclick="editProduct(${row.productId})">Edit</button>
                                    <button class="btn btn-danger" onclick="deleteProduct(${row.productId})">Delete</button>`;
                        }
                    }
                ]
            });

            loadCategoriesForFilter();

            // Apply filter function
            $('#applyFilter').click(function () {
                var productName = $('#filterProductName').val();
                var productCategory = $('#filterProductCategory').val();

                table.ajax.url('https://localhost:7165/api/Products/GetProducts?productName=' + productName + '&productCategory=' + productCategory).load();
            });

            // Reset filter function
            $('#resetFilter').click(function () {
                $('#filterProductName').val('');
                $('#filterProductCategory').val('');
                table.ajax.url('https://localhost:7165/api/Products/GetProducts').load();
            });

        });
        //Filler
        function loadCategoriesForFilter() {
            $.ajax({
                url: 'https://localhost:7165/api/ProductCategory',
                type: 'GET',
                success: function (categories) {
                    var categorySelect = $('#filterProductCategory');
                    categorySelect.empty(); // Clear existing options
                    categorySelect.append(new Option("Filter by Category", "")); // Default option
                    categories.forEach(function (category) {
                        categorySelect.append(new Option(category.productCategory1, category.productCategory1));
                    });
                },
                error: function () {
                    alert("Có lỗi xảy ra khi tải danh mục sản phẩm!");
                }
            });
        }
        // Edit product function
        function editProduct(productId) {
            $.ajax({
                url: 'https://localhost:7165/api/Products/' + productId,
                type: 'GET',
                success: function (product) {
                    $('#productId').val(product.productId);
                    $('#productIdDisplay').val(product.productId); 
                    $('#productName').val(product.productName);
                    $('#price').val(product.price);
                    $('#category').val(product.productCategory1); 
                    $('#productCategoryId').val(product.productCategoryId); 
                    $('#categoryIdDisplay').val(product.productCategoryId); 
                    $('#dateAdded').val(new Date(product.dateAdded).toLocaleDateString());

                    $('#editProductModal').modal('show');
                },
                error: function () {
                    alert("Có lỗi xảy ra khi lấy thông tin sản phẩm!");
                }
            });
        }


        // Update product function
        $('#editProductForm').submit(function (event) {
            event.preventDefault();
            var price = parseFloat($('#price').val());
            var dateValue = $('#dateAdded').val();
            var validDate = new Date(dateValue);

            if (isNaN(validDate)) {
                validDate = new Date();  
            }

            var productData = {
                productId: $('#productId').val(),                 
                productName: $('#productName').val(),             
                price: price,                        
                productCategory1: $('#category').val(),           
                dateAdded: validDate.toISOString(),               
                productCategoryId: $('#productCategoryId').val()  
            };

            $.ajax({
                url: 'https://localhost:7165/api/Products/' + productData.productId,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(productData),
                success: function () {
                    alert("Cập nhật thành công!");
                    $('#productsTable').DataTable().ajax.reload(); 
                    $('#editProductModal').modal('hide'); 
                },
                error: function () {
                    alert("Có lỗi xảy ra khi cập nhật!");
                }
            });
        });


        // Delete product function
        function deleteProduct(productId) {
            if (confirm("Bạn có chắc muốn xóa sản phẩm này?")) {
                $.ajax({
                    url: 'https://localhost:7165/api/Products/' + productId,
                    type: 'DELETE',
                    success: function () {
                        alert("Xóa thành công!");
                        $('#productsTable').DataTable().ajax.reload(); 
                        $('#editProductModal').modal('hide');
                    },
                    error: function () {
                        alert("Có lỗi xảy ra khi xóa!");
                    }
                });
            }
        }
        
        // Open Add Product 
        function openAddProductModal() {
            loadCategories(); 
            $('#addProductModal').modal('show');
        }

        function loadCategories() {
            $.ajax({
                url: 'https://localhost:7165/api/ProductCategory',
                type: 'GET',
                success: function (categories) {
                    var categorySelect = $('#newCategory');
                    categorySelect.empty(); 
                    categories.forEach(function (category) {
                        categorySelect.append(new Option(category.productCategory1, category.productCategoryId));
                    });
                },
                error: function () {
                    alert("Có lỗi xảy ra khi tải danh mục sản phẩm!");
                }
            });
        }

        // Handle Add Product Form Submission
        $('#addProductForm').submit(function (event) {
            event.preventDefault();
            var price = parseFloat($('#newPrice').val());

            var dateValue = $('#newDateAdded').val();
            
            var selectedCategories = $('#newCategory').val(); 
            var categoryIds = selectedCategories ? selectedCategories.join(',') : '';
            if (!productName) {
                alert("Tên sản phẩm không được để trống!");
                return;
            }
            if (!dateValue) {
                alert("Vui lòng chọn ngày thêm sản phẩm!");
                return;
            }
            var newProduct = {
                productName: $('#newProductName').val(),
                price: price,
                productCategory1: '', 
                dateAdded: new Date(dateValue).toISOString(), 
                productCategoryId: categoryIds
            };

            
            $.ajax({
                url: 'https://localhost:7165/api/Products/AddProduct',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(newProduct),
                success: function () {
                    alert("Thêm sản phẩm thành công!");
                    $('#productsTable').DataTable().ajax.reload(); 
                    $('#addProductModal').modal('hide'); 
                },
                error: function (xhr) {
                    try {
                        var errorMessage = xhr.responseJSON?.message || "Có lỗi xảy ra!";
                        alert(errorMessage);
                    } catch (e) {
                        alert("Có lỗi xảy ra khi xử lý yêu cầu!");
                    }
                }
            });
        });
        

    </script>

}
